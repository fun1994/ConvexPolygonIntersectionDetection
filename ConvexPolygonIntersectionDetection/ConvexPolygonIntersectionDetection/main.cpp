#include <iostream>
#include "ConvexPolygonIntersectionDetection.h"
#include "ConvexHull.h"

void print(Point& p) {
	std::cout << "(" << p.x << ", " << p.y << ")";
}

void print(std::vector<Point>& P) {
	for (int i = 0; i < P.size(); i++) {
		print(P[i]);
		std::cout << " ";
	}
	std::cout << std::endl;
}

void generatePoints(std::vector<std::vector<Point>>& S1, std::vector<std::vector<Point>>& S2) {
	Point p;
	S1.push_back(std::vector<Point>());
	p.x = 0.668164426839808; p.y = 0.2987166360374294; S1[0].push_back(p);
	p.x = 0.9470715922425862; p.y = 0.8868131770633664; S1[0].push_back(p);
	p.x = 0.06410557609396894; p.y = 0.31719771251103857; S1[0].push_back(p);
	p.x = 0.6209467220893431; p.y = 0.414689987628158; S1[0].push_back(p);
	p.x = 0.5781214396448198; p.y = 0.41915310084628166; S1[0].push_back(p);
	p.x = 0.25435817969835695; p.y = 0.9821179103359958; S1[0].push_back(p);
	p.x = 0.7852603086694971; p.y = 0.31054914227742625; S1[0].push_back(p);
	p.x = 0.7243448819647916; p.y = 0.7379526276610023; S1[0].push_back(p);
	p.x = 0.5559906440364145; p.y = 0.691889691501167; S1[0].push_back(p);
	p.x = 0.6962451142640613; p.y = 0.6341182795256604; S1[0].push_back(p);
	S1.push_back(std::vector<Point>());
	p.x = 0.6405010593952292; p.y = 0.8030290371632207; S1[1].push_back(p);
	p.x = 0.1680678543116455; p.y = 0.0159923588502886; S1[1].push_back(p);
	p.x = 0.31180741838181225; p.y = 0.5136740778430087; S1[1].push_back(p);
	p.x = 0.5572292950157769; p.y = 0.47998556302043294; S1[1].push_back(p);
	p.x = 0.12270039647403674; p.y = 0.686836433455026; S1[1].push_back(p);
	p.x = 0.8516775005694024; p.y = 0.24149350353116894; S1[1].push_back(p);
	p.x = 0.1638218882942859; p.y = 0.8771789100011932; S1[1].push_back(p);
	p.x = 0.31986533863273814; p.y = 0.79296346217714; S1[1].push_back(p);
	p.x = 0.8725443715515103; p.y = 0.07227698977065833; S1[1].push_back(p);
	p.x = 0.8869112296709332; p.y = 0.5067318973741392; S1[1].push_back(p);
	S1.push_back(std::vector<Point>());
	p.x = 0.6999750433144087; p.y = 0.11522221054707049; S1[2].push_back(p);
	p.x = 0.9880524793366706; p.y = 0.23940382710008123; S1[2].push_back(p);
	p.x = 0.9687421400366734; p.y = 0.010380589041930066; S1[2].push_back(p);
	p.x = 0.8094996637696447; p.y = 0.36508546609654924; S1[2].push_back(p);
	p.x = 0.5750652420292893; p.y = 0.04015446814585133; S1[2].push_back(p);
	p.x = 0.9493558016513123; p.y = 0.5354159280045756; S1[2].push_back(p);
	p.x = 0.6263487232629439; p.y = 0.6471015477044955; S1[2].push_back(p);
	p.x = 0.803955460938478; p.y = 0.20144826402062044; S1[2].push_back(p);
	p.x = 0.9478486051606884; p.y = 0.31572255600081134; S1[2].push_back(p);
	p.x = 0.8298095666220757; p.y = 0.41557328854166753; S1[2].push_back(p);
	S1.push_back(std::vector<Point>());
	p.x = 0.11390535772073107; p.y = 0.344530751379701; S1[3].push_back(p);
	p.x = 0.2520625296194765; p.y = 0.6087346357955807; S1[3].push_back(p);
	p.x = 0.5349131622424185; p.y = 0.4504844192203812; S1[3].push_back(p);
	p.x = 0.9613985752813093; p.y = 0.8489194881336; S1[3].push_back(p);
	p.x = 0.5308886330437594; p.y = 0.37069323147834043; S1[3].push_back(p);
	p.x = 0.44328303682966796; p.y = 0.2668530132600395; S1[3].push_back(p);
	p.x = 0.3206168524523285; p.y = 0.35855986422194985; S1[3].push_back(p);
	p.x = 0.13698480183508055; p.y = 0.3482572301328485; S1[3].push_back(p);
	p.x = 0.8857081175287862; p.y = 0.2590454219078573; S1[3].push_back(p);
	p.x = 0.08084088795367217; p.y = 0.5266255599277541; S1[3].push_back(p);
	S1.push_back(std::vector<Point>());
	p.x = 0.887487375408333; p.y = 0.4266614518676013; S1[4].push_back(p);
	p.x = 0.12562671083144417; p.y = 0.23685340319635773; S1[4].push_back(p);
	p.x = 0.8517993621262656; p.y = 0.7705648278387369; S1[4].push_back(p);
	p.x = 0.7483068884926178; p.y = 0.2939556023479085; S1[4].push_back(p);
	p.x = 0.9389047420637312; p.y = 0.28082560071968143; S1[4].push_back(p);
	p.x = 0.40216046634924074; p.y = 0.30850543794428453; S1[4].push_back(p);
	p.x = 0.13194588936881546; p.y = 0.8948467434346095; S1[4].push_back(p);
	p.x = 0.7049558811011145; p.y = 0.6377573382603601; S1[4].push_back(p);
	p.x = 0.055338260792592964; p.y = 0.7564834116732213; S1[4].push_back(p);
	p.x = 0.7478750141483467; p.y = 0.8989460529066556; S1[4].push_back(p);
	S1.push_back(std::vector<Point>());
	p.x = 0.8314089967492959; p.y = 0.08271757465402763; S1[5].push_back(p);
	p.x = 0.6331936657070844; p.y = 0.34589723660345184; S1[5].push_back(p);
	p.x = 0.8956921462630574; p.y = 0.7299015095658239; S1[5].push_back(p);
	p.x = 0.8816296816299531; p.y = 0.38151599527102575; S1[5].push_back(p);
	p.x = 0.9299817418538554; p.y = 0.9943196231660505; S1[5].push_back(p);
	p.x = 0.9749893731377448; p.y = 0.6838194236018933; S1[5].push_back(p);
	p.x = 0.4925131794961801; p.y = 0.967724244132283; S1[5].push_back(p);
	p.x = 0.6795400187434204; p.y = 0.7886488324737966; S1[5].push_back(p);
	p.x = 0.4088354881183234; p.y = 0.8357234071657442; S1[5].push_back(p);
	p.x = 0.837200701629901; p.y = 0.13115080969747606; S1[5].push_back(p);
	S1.push_back(std::vector<Point>());
	p.x = 0.8067108140123932; p.y = 0.49579660236321066; S1[6].push_back(p);
	p.x = 0.14331574146641457; p.y = 0.5961947303545904; S1[6].push_back(p);
	p.x = 0.7801805399655223; p.y = 0.6840892558260063; S1[6].push_back(p);
	p.x = 0.43357159663985945; p.y = 0.9848524489477427; S1[6].push_back(p);
	p.x = 0.24098540160993231; p.y = 0.3628428287491279; S1[6].push_back(p);
	p.x = 0.11010470417431428; p.y = 0.254871148240406; S1[6].push_back(p);
	p.x = 0.8024876146440304; p.y = 0.4314068262838734; S1[6].push_back(p);
	p.x = 0.0011440905840164328; p.y = 0.2913344929034579; S1[6].push_back(p);
	p.x = 0.3132566106312319; p.y = 0.8882640899663926; S1[6].push_back(p);
	p.x = 0.30415026689317926; p.y = 0.24495780864908323; S1[6].push_back(p);
	S1.push_back(std::vector<Point>());
	p.x = 0.16290229989252603; p.y = 0.42420209728576885; S1[7].push_back(p);
	p.x = 0.14174132969468045; p.y = 0.785023928810127; S1[7].push_back(p);
	p.x = 0.16681066568830727; p.y = 0.3958446105914545; S1[7].push_back(p);
	p.x = 0.21335109802154906; p.y = 0.7880502232234107; S1[7].push_back(p);
	p.x = 0.48651195539649095; p.y = 0.5515182234807605; S1[7].push_back(p);
	p.x = 0.3118714804940199; p.y = 0.2105502610858272; S1[7].push_back(p);
	p.x = 0.16216596191436128; p.y = 0.547226237288955; S1[7].push_back(p);
	p.x = 0.4424611260666165; p.y = 0.20961224897062425; S1[7].push_back(p);
	p.x = 0.32638219420690084; p.y = 0.9877450659784974; S1[7].push_back(p);
	p.x = 0.6674757077923323; p.y = 0.24679842338104108; S1[7].push_back(p);
	S1.push_back(std::vector<Point>());
	p.x = 0.724837239872669; p.y = 0.9967559351047088; S1[8].push_back(p);
	p.x = 0.7914878447126178; p.y = 0.04680758410642949; S1[8].push_back(p);
	p.x = 0.9212545854622589; p.y = 0.5133439263787599; S1[8].push_back(p);
	p.x = 0.6106184609847577; p.y = 0.4446321495044824; S1[8].push_back(p);
	p.x = 0.15867970761775096; p.y = 0.3507996387583904; S1[8].push_back(p);
	p.x = 0.6681880865295199; p.y = 0.43448804978119127; S1[8].push_back(p);
	p.x = 0.4243112313824141; p.y = 0.6196158200187443; S1[8].push_back(p);
	p.x = 0.09326808383963936; p.y = 0.9256865417437934; S1[8].push_back(p);
	p.x = 0.264491815998369; p.y = 0.3066565534776259; S1[8].push_back(p);
	p.x = 0.9497065234743602; p.y = 0.2697397131345445; S1[8].push_back(p);
	S1.push_back(std::vector<Point>());
	p.x = 0.2051791222616659; p.y = 0.9263940260212543; S1[9].push_back(p);
	p.x = 0.9663730990552669; p.y = 0.7136785224460949; S1[9].push_back(p);
	p.x = 0.966991030980061; p.y = 0.2261029459765086; S1[9].push_back(p);
	p.x = 0.15487560128079503; p.y = 0.279454048905737; S1[9].push_back(p);
	p.x = 0.598435188728304; p.y = 0.16122277054262013; S1[9].push_back(p);
	p.x = 0.05065706978730122; p.y = 0.7187930526247012; S1[9].push_back(p);
	p.x = 0.23103203164284314; p.y = 0.3702446025214545; S1[9].push_back(p);
	p.x = 0.6831739042955993; p.y = 0.25723109467935024; S1[9].push_back(p);
	p.x = 0.9381228220655713; p.y = 0.172801381709759; S1[9].push_back(p);
	p.x = 0.7592972291873203; p.y = 0.1801721216013359; S1[9].push_back(p);
	S2.push_back(std::vector<Point>());
	p.x = -0.9835109118260135; p.y = -0.7153915522494416; S2[0].push_back(p);
	p.x = -0.22392510530863075; p.y = -0.34020847028198553; S2[0].push_back(p);
	p.x = -0.6782378127096026; p.y = -0.3946609256817398; S2[0].push_back(p);
	p.x = -0.7795157638781144; p.y = -0.6746989875398552; S2[0].push_back(p);
	p.x = -0.3978954572278325; p.y = -0.3768439509041539; S2[0].push_back(p);
	p.x = -0.6143331490176278; p.y = -0.3945207120555836; S2[0].push_back(p);
	p.x = -0.66533293327145; p.y = -0.3853704285894617; S2[0].push_back(p);
	p.x = -0.5762916743933346; p.y = -0.7029785340763698; S2[0].push_back(p);
	p.x = -0.15535467386752233; p.y = -0.7692945483172983; S2[0].push_back(p);
	p.x = -0.8920185377516903; p.y = -0.6188409068319349; S2[0].push_back(p);
	S2.push_back(std::vector<Point>());
	p.x = -0.44825116682248345; p.y = -0.1486190504642554; S2[1].push_back(p);
	p.x = -0.5665425087096216; p.y = -0.6697697453493672; S2[1].push_back(p);
	p.x = -0.39412955221242474; p.y = -0.0753207429975451; S2[1].push_back(p);
	p.x = -0.859493394044092; p.y = -0.2382141120720348; S2[1].push_back(p);
	p.x = -0.9808175812104233; p.y = -0.1287624383302235; S2[1].push_back(p);
	p.x = -0.4829750824069162; p.y = -0.5315561718999612; S2[1].push_back(p);
	p.x = -0.7877532641240832; p.y = -0.9892718844383949; S2[1].push_back(p);
	p.x = -0.06517343143942356; p.y = -0.12431726635537554; S2[1].push_back(p);
	p.x = -0.2371573953361611; p.y = -0.2813423535440004; S2[1].push_back(p);
	p.x = -0.24643096805537956; p.y = -0.4065739357215733; S2[1].push_back(p);
	S2.push_back(std::vector<Point>());
	p.x = -0.5403783559076226; p.y = -0.7192657590429145; S2[2].push_back(p);
	p.x = -0.9464823775028435; p.y = -0.20388951138926148; S2[2].push_back(p);
	p.x = -0.8474224532346795; p.y = -0.8365350953833164; S2[2].push_back(p);
	p.x = -0.9828539360065914; p.y = -0.49911037377404155; S2[2].push_back(p);
	p.x = -0.7144003791387284; p.y = -0.8520596438858319; S2[2].push_back(p);
	p.x = -0.48342654852109035; p.y = -0.8875224058938808; S2[2].push_back(p);
	p.x = -0.5292028408629265; p.y = -0.24992455111367817; S2[2].push_back(p);
	p.x = -0.46890077401151864; p.y = -0.4362471286095385; S2[2].push_back(p);
	p.x = -0.7568337601345967; p.y = -0.14933905345189524; S2[2].push_back(p);
	p.x = -0.16439151047110656; p.y = -0.36426851400151117; S2[2].push_back(p);
	S2.push_back(std::vector<Point>());
	p.x = -0.9313619401210363; p.y = -0.7672071492631003; S2[3].push_back(p);
	p.x = -0.5328134719364782; p.y = -0.4158057374118692; S2[3].push_back(p);
	p.x = -0.5757903954745464; p.y = -0.7085578105946032; S2[3].push_back(p);
	p.x = -0.3221407615012736; p.y = -0.6273273749073457; S2[3].push_back(p);
	p.x = -0.7568341836014922; p.y = -0.4376945567959798; S2[3].push_back(p);
	p.x = -0.5797885155217486; p.y = -0.42516837901770055; S2[3].push_back(p);
	p.x = -0.9468517074955123; p.y = -0.510233900490764; S2[3].push_back(p);
	p.x = -0.16741729947488493; p.y = -0.25225831804915755; S2[3].push_back(p);
	p.x = -0.3636852162371127; p.y = -0.286223230635394; S2[3].push_back(p);
	p.x = -0.8646450579825088; p.y = -0.920268649912646; S2[3].push_back(p);
	S2.push_back(std::vector<Point>());
	p.x = -0.08218147804225928; p.y = -0.6240618976200493; S2[4].push_back(p);
	p.x = -0.91700002065599; p.y = -0.7840118088622112; S2[4].push_back(p);
	p.x = -0.8462181276281507; p.y = -0.09690008229113489; S2[4].push_back(p);
	p.x = -0.32639153277112565; p.y = -0.1731797090884637; S2[4].push_back(p);
	p.x = -0.6104886613331757; p.y = -0.444228909384657; S2[4].push_back(p);
	p.x = -0.814168420924665; p.y = -0.5121041233993423; S2[4].push_back(p);
	p.x = -0.8022244270833482; p.y = -0.42077405398169454; S2[4].push_back(p);
	p.x = -0.5898439781570041; p.y = -0.2485561806488057; S2[4].push_back(p);
	p.x = -0.18781248914905535; p.y = -0.9638906578687764; S2[4].push_back(p);
	p.x = -0.3118319724855092; p.y = -0.7517529245419812; S2[4].push_back(p);
	S2.push_back(std::vector<Point>());
	p.x = -0.3340898217819813; p.y = -0.8387525545206216; S2[5].push_back(p);
	p.x = -0.45247624683738896; p.y = -0.3703211886961605; S2[5].push_back(p);
	p.x = -0.13218695999866958; p.y = -0.4581456951860968; S2[5].push_back(p);
	p.x = -0.39945043261148894; p.y = -0.6446883508738541; S2[5].push_back(p);
	p.x = -0.35788421762345723; p.y = -0.8054302324862613; S2[5].push_back(p);
	p.x = -0.48230240152861836; p.y = -0.9885871445023915; S2[5].push_back(p);
	p.x = -0.7016316010406124; p.y = -0.2851158698403382; S2[5].push_back(p);
	p.x = -0.8909299544135463; p.y = -0.027638357795002455; S2[5].push_back(p);
	p.x = -0.8937580474658695; p.y = -0.2656838338038805; S2[5].push_back(p);
	p.x = -0.43036750466293405; p.y = -0.530199133132798; S2[5].push_back(p);
	S2.push_back(std::vector<Point>());
	p.x = -0.2372793339158792; p.y = -0.5732728845765622; S2[6].push_back(p);
	p.x = -0.09595019111874947; p.y = -0.3662352909642722; S2[6].push_back(p);
	p.x = -0.2028772774947195; p.y = -0.22584554444507177; S2[6].push_back(p);
	p.x = -0.7779239845415419; p.y = -0.7243842835376364; S2[6].push_back(p);
	p.x = -0.901676314525584; p.y = -0.39664322472383784; S2[6].push_back(p);
	p.x = -0.8749082825934635; p.y = -0.968266740119522; S2[6].push_back(p);
	p.x = -0.7483864009822462; p.y = -0.138624106402503; S2[6].push_back(p);
	p.x = -0.6330101348319895; p.y = -0.35994839934356126; S2[6].push_back(p);
	p.x = -0.6518254293423833; p.y = -0.4970773674801373; S2[6].push_back(p);
	p.x = -0.832222871740171; p.y = -0.7579123445102425; S2[6].push_back(p);
	S2.push_back(std::vector<Point>());
	p.x = -0.14618324667790528; p.y = -0.6677781642240439; S2[7].push_back(p);
	p.x = -0.35452440802758245; p.y = -0.9356475152964592; S2[7].push_back(p);
	p.x = -0.4119830769034024; p.y = -0.7872413419049702; S2[7].push_back(p);
	p.x = -0.9991253805238203; p.y = -0.8921505919244048; S2[7].push_back(p);
	p.x = -0.6902324075409083; p.y = -0.20255600101488414; S2[7].push_back(p);
	p.x = -0.7598925700285174; p.y = -0.8349128910402065; S2[7].push_back(p);
	p.x = -0.7229880060974976; p.y = -0.6174518672118934; S2[7].push_back(p);
	p.x = -0.9544264827441957; p.y = -0.054110432078395054; S2[7].push_back(p);
	p.x = -0.7697214406129346; p.y = -0.5372022250729064; S2[7].push_back(p);
	p.x = -0.026325390014575567; p.y = -0.34363727260432; S2[7].push_back(p);
	S2.push_back(std::vector<Point>());
	p.x = -0.5724483203166628; p.y = -0.9931580144727988; S2[8].push_back(p);
	p.x = -0.413209515054063; p.y = -0.9104348659590967; S2[8].push_back(p);
	p.x = -0.2946456408814391; p.y = -0.663965690565839; S2[8].push_back(p);
	p.x = -0.2467591341152764; p.y = -0.02393802031783243; S2[8].push_back(p);
	p.x = -0.5529796684630567; p.y = -0.3693532989845696; S2[8].push_back(p);
	p.x = -0.43373100377063756; p.y = -0.9813110664785598; S2[8].push_back(p);
	p.x = -0.16794462847160185; p.y = -0.8011600259810513; S2[8].push_back(p);
	p.x = -0.4473891247719083; p.y = -0.11181020954013177; S2[8].push_back(p);
	p.x = -0.02979804401236119; p.y = -0.9045055343135284; S2[8].push_back(p);
	p.x = -0.6978216506754006; p.y = -0.9851066535042069; S2[8].push_back(p);
	S2.push_back(std::vector<Point>());
	p.x = -0.5042395782817949; p.y = -0.613512232512914; S2[9].push_back(p);
	p.x = -0.11484111756359072; p.y = -0.0007154562461336722; S2[9].push_back(p);
	p.x = -0.8857016301947459; p.y = -0.2942026460369753; S2[9].push_back(p);
	p.x = -0.43039264449134174; p.y = -0.713073069422339; S2[9].push_back(p);
	p.x = -0.3874403814284646; p.y = -0.07922186895993244; S2[9].push_back(p);
	p.x = -0.26201753536832517; p.y = -0.4633195493331195; S2[9].push_back(p);
	p.x = -0.6704244459789624; p.y = -0.39366455620163654; S2[9].push_back(p);
	p.x = -0.9511163581830466; p.y = -0.2210652263313061; S2[9].push_back(p);
	p.x = -0.7661348522692413; p.y = -0.7015623983449144; S2[9].push_back(p);
	p.x = -0.47175482269928526; p.y = -0.654806823261634; S2[9].push_back(p);
}

void test() {
	ConvexPolygonIntersectionDetection CPID;
	ConvexHull CH;
	std::vector<std::vector<Point>> S1, S2;
	generatePoints(S1, S2);
	for (int i = 0; i < S1.size(); i++) {
		std::vector<Point> P1 = CH.GrahamScan(S1[i]);
		std::vector<Point> P2 = CH.GrahamScan(S2[i]);
		for (int j = 0; j < P1.size(); j++) {
			P1.push_back(P1[0]);
			P1.erase(P1.begin());
			for (int k = 0; k < P2.size(); k++) {
				P2.push_back(P2[0]);
				P2.erase(P2.begin());
				for (int m = 0; m < 20; m++) {
					for (int p = 0; p < P2.size(); p++) {
						P2[p].x += 0.1;
					}
					for (int n = 0; n < 20; n++) {
						for (int p = 0; p < P2.size(); p++) {
							P2[p].y += 0.1;
						}
						bool flag1 = CPID.bruteForce(P1, P2);
						bool flag2 = CPID.DobkinKirkpatrick(P1, P2);
						if (flag1 != flag2) {
							print(P1);
							print(P2);
							std::cin.get();
						}
					}
					for (int p = 0; p < P2.size(); p++) {
						P2[p].y -= 2;
					}
				}
				for (int p = 0; p < P2.size(); p++) {
					P2[p].x -= 2;
				}
			}
		}
	}
}

int main() {
	test();
	return 0;
}
